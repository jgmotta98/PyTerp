name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "pyterp"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Extract tag name from Git ref
        id: release
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest version from PyPI
        id: pypi
        run: |
          LATEST_PYPI_VERSION=$(curl -s "https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json" | jq -r ".info.version" || echo "0.0.0")
          if [ "$LATEST_PYPI_VERSION" == "null" ]; then
            LATEST_PYPI_VERSION="0.0.0"
          fi
          echo "latest_pypi_version=$LATEST_PYPI_VERSION" >> "$GITHUB_OUTPUT"
          echo "Latest version on PyPI is $LATEST_PYPI_VERSION"

      - name: Compare new tag with PyPI version
        run: |
          NEW_TAG="${{ needs.details.outputs.tag_name }}"
          LATEST_PYPI_VERSION="${{ steps.pypi.outputs.latest_pypi_version }}"
          
          # Compara as versões (sort -V lida com semver)
          if [ "$(printf '%s\n' "$LATEST_PYPI_VERSION" "$NEW_TAG" | sort -rV | head -n 1)" != "$NEW_TAG" ] || [ "$NEW_TAG" == "$LATEST_PYPI_VERSION" ]; then
            echo "::error::New tag '${NEW_TAG}' is not greater than the latest PyPI version '${LATEST_PYPI_VERSION}'."
            exit 1
          else
            echo "New tag '${NEW_TAG}' is valid and greater than PyPI version '${LATEST_PYPI_VERSION}'."
          fi

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [details, check_pypi]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          VERSION: ${{ needs.details.outputs.tag_name }}

          CIBW_BEFORE_BUILD: >
            bash -c "
              set -euxo pipefail
              echo '--- Forçando a versão para ${VERSION} ---'
              # O .bak é para compatibilidade entre shells
              sed -i.bak 's/dynamic\s*=\s*\["version"\]/version = \"'${VERSION}'\"/' /project/pyproject.toml
              sed -i.bak '/"setuptools-scm"/d' /project/pyproject.toml
              echo '--- pyproject.toml modificado: ---'
              cat /project/pyproject.toml
            "

          CIBW_BEFORE_BUILD_LINUX: >
            {self} &&
            bash -c "
              set -euxo pipefail
              echo '--- Instalando dependências do Linux ---'
              if command -v yum; then yum install -y libgomp;
              elif command -v dnf; then dnf install -y libgomp;
              elif command -v apt-get; then apt-get update && apt-get install -y --no-install-recommends libgomp1;
              fi
            "
          
          # Suas outras configurações
          CIBW_SKIP: "*-musllinux* pp* *_i686"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: ./wheelhouse

  pypi_publish:
    name: Upload release to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/pyterp/
    permissions:
      id-token: write
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: dist-*
          merge-multiple: true
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: [pypi_publish, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: dist-*
          merge-multiple: true
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ needs.details.outputs.tag_name }}" dist/* \
            --title "${{ env.PACKAGE_NAME }} ${{ needs.details.outputs.tag_name }}" \
            --generate-notes